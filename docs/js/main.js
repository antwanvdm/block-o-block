!function(e){var t={};function s(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},s.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=1)}([function(e){e.exports={game:{levelsPerGame:10,startElementsPerLevel:5,elementsIncreasePerLevel:5,scorePerElement:10,secondsPerLevel:10,blockSpeed:{min:1,max:5},blockPixels:{min:10,max:150},player:{growthFactor:1.5,speed:3,speedIncreaseFactor:.2}},functionalities:{dataService:!0},dataService:{baseUrl:"https://api.mlab.com/api/1",apiKey:"X17utv1FH2dFTeUo4yhNGL54sA7CY2jS",databaseName:"typescript_scores",collectionName:"scores"}}},function(e,t,s){"use strict";s.r(t);var i=s(0);class r{constructor(e,t,s,i=""){this.x=t,this.y=s,this.el=document.createElement("div");let r=document.getElementById("main");if(null===r)throw new Error("<main> element doesn't exist!");if(this.x>-1&&this.y>-1&&(this.el.style.transform=`translate(${this.x}px, ${this.y}px)`),this.el.classList.add(`game-${e}`),""===i)r.appendChild(this.el);else{let e=document.querySelector(`.game-${i}`);if(null===e)throw new Error(`<.game-${i}> element doesn't exist!`);e.appendChild(this.el)}}getClientReact(){return this.el.getBoundingClientRect()}}class n extends r{constructor(){super("score",-1,-1,"gui"),this.score=0,this.renderTemplate(),this.el.querySelector(".score-count").innerHTML=this.score.toString(),this.el.classList.add("message","is-warning")}get(){return this.score}update(e,t=!1){this.score=t?e:this.score+e,this.el.querySelector(".score-count").innerHTML=this.score.toString()}renderTemplate(){this.el.innerHTML='\n            <div class="message-body">\n                <span>score: </span>\n                <span class="score-count"></span>\n            </div>\n        '}}class a{static addEventListener(e,t){a.functionMap[e]=t,window.addEventListener(e.split(".")[0],a.functionMap[e])}static removeEventListener(e){window.removeEventListener(e.split(".")[0],a.functionMap[e]),delete a.functionMap[e]}}a.functionMap={};class o extends r{constructor(){super("messagescreen",-1,-1,"gui"),this.isActive=!1,this.messages={"game:start":{header:"Welcome to Block-o-Block!",body:"It's time to catch them blocks!<br/><br/>Use your arrow keys to move your player around and press space to start.<br/><br/>Press -<strong>H</strong>- to view the highscore list",className:"is-info"},"game:end":{header:"Your game is over!",body:"You made it, your final score is __SCORE__ out of max __MAX_SCORE__ points.<br/><br/>Thanks for playing, press space to restart the madness.<br/><br/>Press -<strong>H</strong>- to view the highscore list",className:"is-success"},"level:success":{header:"YEAH! Level completed!",body:"Performing like a boss! Press space to proceed to the next level and catch even more blocks",className:"is-success"},"level:failed":{header:"AAH! Level failed!",body:"Try again and show us what you're made off! Press space to restart this level",className:"is-danger"}},this.el.classList.add("message"),this.renderTemplate(),this.show("game:start"),a.addEventListener("keyup.messagescreen",e=>this.keyBoardHandler(e))}keyBoardHandler(e){32===e.keyCode&&!0===this.isActive&&window.dispatchEvent(new Event(`${this.currentEvent}:click`))}show(e,t={}){let s=this.messages[e].header,i=this.messages[e].body;for(let e in t)i=i.replace(e,t[e]);this.el.querySelector(".message-header").innerHTML=s,this.el.querySelector(".message-body").innerHTML=i,this.el.classList.add("show",this.messages[e].className),this.currentEvent=e,this.isActive=!0}hide(){this.el.classList.remove("show","is-info","is-success","is-danger"),this.isActive=!1}renderTemplate(){this.el.innerHTML='\n            <div class="message-header"></div>\n            <div class="message-body"></div>\n        '}}class h{constructor(){this.endPointList=`/databases/${i.dataService.databaseName}/collections/${i.dataService.collectionName}?apiKey=${i.dataService.apiKey}`,this.endPointSave=`/databases/${i.dataService.databaseName}/collections/${i.dataService.collectionName}?apiKey=${i.dataService.apiKey}`}saveScore(e){if(!1===i.functionalities.dataService)return this.disabled();let t=`${i.dataService.baseUrl}${this.endPointSave}`;return fetch(t,{body:JSON.stringify({score:e}),headers:{"content-type":"application/json"},method:"POST",mode:"cors"}).then(e=>e.json())}getScores(){if(!1===i.functionalities.dataService)return this.disabled();let e=`${i.dataService.baseUrl}${this.endPointList}&s={"score": -1}&l=10`;return fetch(e,{mode:"cors"}).then(e=>e.json())}disabled(){return new Promise(e=>{e({error:"Dataservice is disabled"})})}}class l extends r{constructor(){super("highscorelist",-1,-1,"gui"),this.el.classList.add("message","is-warning"),this.renderTemplate(),this.dataService=new h}show(){this.dataService.getScores().then(e=>{this.el.querySelector(".tbody").innerHTML=this.getTbodyTemplate(e),this.el.classList.add("show")})}hide(){this.el.classList.remove("show")}getTbodyTemplate(e){return`\n            ${e.map((e,t)=>`<tr>\n                <td>${t+1}</td>\n                <td>${e._id.$oid}</td>\n                <td>${e.score.toString()}</td>\n            </tr>`).join("")}\n        `}renderTemplate(){this.el.innerHTML='\n            <div class="message-header">\n                <p>Top 10 High Scores (press -<strong>esc</strong>- to return)</p>\n            </div>\n            <div class="message-body">\n                <table class="table">\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>MongoID</th>\n                        <th>Score</th>\n                    </tr>\n                    </thead>\n                    <tbody class="tbody"></tbody>\n                </table>\n            </div>\n        '}}class d extends r{constructor(){super("gui",-1,-1),this.highScoreListVisible=!1,this.score=new n,this.messageScreen=new o,window.addEventListener("level:scoreUpdate",e=>this.score.update(e.detail.score)),!0===i.functionalities.dataService&&(this.highScoreList=new l,a.addEventListener("keyup.highscorelist",e=>this.keyBoardHandler(e)))}keyBoardHandler(e){72===e.keyCode&&!1===this.highScoreListVisible?(this.highScoreListVisible=!0,this.highScoreList.show()):27===e.keyCode&&!0===this.highScoreListVisible&&(this.highScoreListVisible=!1,this.highScoreList.hide())}levelDone(e){this.messageScreen.show(e)}newLevel(){this.messageScreen.hide()}gameEnd(e){this.messageScreen.show("game:end",{__SCORE__:this.score.get().toString(),__MAX_SCORE__:e.toString()})}restart(){this.messageScreen.hide(),this.messageScreen.show("game:start"),this.score.update(0,!0)}getScore(){return this.score.get()}}class c{static getRandomColor(){let e=Math.round,t=Math.random;return`rgba(${e(255*t())},${e(255*t())},${e(255*t())},1)`}static getRandomInt(e,t){return Math.floor(Math.random()*(t-e+1))+e}static checkCollision(e,t){return e.left<=t.right&&t.left<=e.right&&e.top<=t.bottom&&t.top<=e.bottom}}class m extends r{constructor(e,t,s,i){super("block",0,0,"level"),this.destination={x:0,y:0},this.speed=t,this.width=s,this.height=i,this.color=e,this.el.style.backgroundImage=`repeating-linear-gradient(${c.getRandomInt(0,360)}deg, #000000, #000000 ${c.getRandomInt(2,10)}px, ${this.color} 10px, ${this.color} ${c.getRandomInt(20,40)}px)`,this.el.style.width=`${this.width}px`,this.el.style.height=`${this.height}px`,this.x=c.getRandomInt(0,window.outerWidth-this.width),this.y=c.getRandomInt(0,document.documentElement.clientHeight-this.height),this.el.style.transform=`translate(${this.x}px, ${this.y}px)`}destroy(){this.el.remove()}update(){this.x>this.destination.x-this.speed&&this.x<this.destination.x+this.speed&&(this.destination.x=c.getRandomInt(0,window.outerWidth-this.width)),this.y>this.destination.y-this.speed&&this.y<this.destination.y+this.speed&&(this.destination.y=c.getRandomInt(0,document.documentElement.clientHeight-this.height)),this.destination.x>=this.x?this.x+=this.speed:this.x-=this.speed,this.destination.y>=this.y?this.y+=this.speed:this.y-=this.speed,this.el.style.transform=`translate(${this.x}px, ${this.y}px)`}}class p extends r{constructor(){super("player",0,0,"level"),this.height=10,this.width=10,this.growthFactor=i.game.player.growthFactor,this.speed=i.game.player.speed,this.speedIncreaseFactor=i.game.player.speedIncreaseFactor,this.keysAllowed=[37,38,39,40],this.keysPressed=[],this.x=window.outerWidth/2-this.width/2,this.y=document.documentElement.clientHeight/2-this.height/2,this.el.style.width=`${this.width}px`,this.el.style.height=`${this.height}px`,this.el.style.borderRadius=`${this.width}px`,a.addEventListener("keydown.player",e=>this.keyDownHandler(e)),a.addEventListener("keyup.player",e=>this.keyUpHandler(e))}keyDownHandler(e){let t=e.keyCode;this.keysAllowed.indexOf(t)>-1&&-1===this.keysPressed.indexOf(t)&&this.keysPressed.push(t)}keyUpHandler(e){let t=e.keyCode,s=this.keysPressed.indexOf(t);this.keysAllowed.indexOf(t)>-1&&s>-1&&this.keysPressed.splice(s,1)}update(){this.keysPressed.forEach(e=>{switch(e){case 37:this.x-=this.speed;break;case 38:this.y-=this.speed;break;case 39:this.x+=this.speed;break;case 40:this.y+=this.speed;break;default:return}}),this.x<0&&(this.x=0),this.y<0&&(this.y=0),this.x>window.outerWidth-this.width&&(this.x=window.outerWidth-this.width),this.y>document.documentElement.clientHeight-this.height&&(this.y=document.documentElement.clientHeight-this.height),this.el.style.transform=`translate(${this.x}px, ${this.y}px)`}blockCaught(e){this.speed+=this.speedIncreaseFactor,this.width+=this.growthFactor,this.height+=this.growthFactor,this.el.style.height=`${this.height}px`,this.el.style.width=`${this.width}px`,this.el.style.borderRadius=`${this.width}px`,this.el.style.backgroundColor=e.color}destroy(){a.removeEventListener("keydown.player"),a.removeEventListener("keyup.player")}}class g extends r{constructor(){super("timer",-1,-1,"level"),this.seconds=i.game.secondsPerLevel,this.renderTemplate(),this.el.classList.add("message","is-primary"),this.el.querySelector(".seconds").innerHTML=this.seconds.toString(),this.intervalId=setInterval(()=>this.update(),1e3)}update(){this.seconds--,this.el.querySelector(".seconds").innerHTML=this.seconds.toString(),this.seconds<=3?(this.el.classList.remove("is-primary"),this.el.classList.add("is-danger")):(this.el.classList.add("is-primary"),this.el.classList.remove("is-danger")),0===this.seconds&&window.dispatchEvent(new Event("timer:done"))}destroy(){clearInterval(this.intervalId)}renderTemplate(){this.el.innerHTML='\n            <div class="message-body">\n                <span>time: </span>\n                <span class="seconds"></span>\n            </div>\n        '}}class u extends r{constructor(e,t){super("level",0,0),this.blocks=[],this.failed=!1,this.totalBlocks=e,this.scorePerBlock=t,this.player=new p,this.timer=new g;for(let e=0;e<this.totalBlocks;e++)this.blocks.push(new m(c.getRandomColor(),c.getRandomInt(i.game.blockSpeed.min,i.game.blockSpeed.max),c.getRandomInt(i.game.blockPixels.min,i.game.blockPixels.max),c.getRandomInt(i.game.blockPixels.min,i.game.blockPixels.max)));a.addEventListener("timer:done",()=>{this.failed=!0,this.destroy("level:failed")})}update(){this.player.update(),this.blocks.forEach((e,t)=>{e.update(),c.checkCollision(this.player.getClientReact(),e.getClientReact())&&!1===this.failed&&(this.player.blockCaught(e),e.destroy(),this.blocks.splice(t,1),window.dispatchEvent(new CustomEvent("level:scoreUpdate",{detail:{score:this.scorePerBlock}})),0===this.blocks.length&&this.destroy("level:success"))})}destroy(e){this.timer.destroy(),this.player.destroy(),this.blocks.forEach((e,t)=>{e.destroy(),this.blocks.splice(t,1)}),a.removeEventListener("timer:done"),window.dispatchEvent(new Event(e)),this.el.remove()}}window.addEventListener("load",()=>new class{constructor(){this.levelsPerGame=i.game.levelsPerGame,this.currentLevelsPlayed=0,this.startElementsPerLevel=i.game.startElementsPerLevel,this.elementsIncreasePerLevel=i.game.elementsIncreasePerLevel,this.scorePerElement=i.game.scorePerElement,this.gui=new d,this.maxScore=this.calculateMaxScore(),this.gameLoop(),this.dataService=new h,["level:success","level:failed"].map(e=>{window.addEventListener(e,e=>this.update(e.type))}),["game:start:click","level:success:click","level:failed:click"].map(e=>{window.addEventListener(e,()=>this.startNewLevel())}),window.addEventListener("game:end:click",()=>this.restart())}calculateMaxScore(){let e=0;for(let t=0;t<this.levelsPerGame;t++)e+=(this.startElementsPerLevel+(0===t?0:this.elementsIncreasePerLevel*t))*this.scorePerElement;return e}gameLoop(){void 0!==this.level&&this.level.update(),requestAnimationFrame(()=>this.gameLoop())}update(e){if(this.currentLevelsPlayed++,this.currentLevelsPlayed===this.levelsPerGame)return this.gui.gameEnd(this.maxScore),void this.saveScore();this.gui.levelDone(e)}startNewLevel(){this.level&&!1===this.level.failed&&(this.startElementsPerLevel+=this.elementsIncreasePerLevel),delete this.level,this.gui.newLevel(),this.level=new u(this.startElementsPerLevel,this.scorePerElement)}restart(){this.gui.restart(),this.currentLevelsPlayed=0,this.startElementsPerLevel=5}saveScore(){let e=this.gui.getScore();this.dataService.saveScore(e).then(e=>{console.log("Response after saving score",e)})}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,