!function(e){var t={};function s(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},s.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=1)}([function(e){e.exports={functionalities:{dataService:!0},dataService:{baseUrl:"https://api.mlab.com/api/1",apiKey:"X17utv1FH2dFTeUo4yhNGL54sA7CY2jS",databaseName:"typescript_scores",collectionName:"scores"}}},function(e,t,s){"use strict";s.r(t);class i{constructor(e,t,s,i=""){this.x=t,this.y=s,this.el=document.createElement("div");let r=document.getElementById("main");if(null===r)throw new Error("<main> element doesn't exist!");if(this.el.style.transform=`translate(${this.x}px, ${this.y}px)`,this.el.classList.add(e),""===i)r.appendChild(this.el);else{let e=document.querySelector(`.${i}`);if(null===e)throw new Error(`<.${i}> element doesn't exist!`);e.appendChild(this.el)}}getClientReact(){return this.el.getBoundingClientRect()}}class r extends i{constructor(){super("score",10,10,"gui"),this.score=0,this.el.innerHTML=`score: ${this.score.toString()}`}get(){return this.score}update(e,t=!1){this.score=t?e:this.score+e,this.el.innerHTML=`score: ${this.score.toString()}`}}class n{static addEventListener(e,t){n.functionMap[e]=t,window.addEventListener(e.split(".")[0],n.functionMap[e])}static removeEventListener(e){window.removeEventListener(e.split(".")[0],n.functionMap[e]),delete n.functionMap[e]}}n.functionMap={};class h extends i{constructor(){super("messagescreen",0,0,"gui"),this.height=200,this.width=400,this.isActive=!1,this.messages={"game:start":"Welcome to Block-o-Block, it's time to catch them blocks!<br/><br/>Use your arrow keys to move your player around and press space to start.","game:end":"You made it, your final score is __SCORE__ out of max __MAX_SCORE__ points.<br/><br/>Thanks for playing, press space to restart the madness","level:success":"YEAH! Level completed! Press space to proceed to the next level","level:failed":"AAH! Level failed! Press space to restart this level"},this.x=window.outerWidth/2-this.width/2,this.y=document.documentElement.clientHeight/2-this.height/2,this.el.style.width=`${this.width}px`,this.el.style.height=`${this.height}px`,this.el.style.transform=`translate(${this.x}px, ${this.y}px)`,this.show("game:start"),n.addEventListener("keyup.messagescreen",e=>this.keyBoardHandler(e))}keyBoardHandler(e){32===e.keyCode&&!0===this.isActive&&window.dispatchEvent(new Event(`${this.currentEvent}:click`))}show(e,t={}){let s=this.messages[e];for(let e in t)s=s.replace(e,t[e]);this.el.innerHTML=s,this.el.classList.add("show"),this.currentEvent=e,this.isActive=!0}hide(){this.el.classList.remove("show"),this.isActive=!1}}class o extends i{constructor(){super("gui",0,0),this.score=new r,this.messageScreen=new h,window.addEventListener("level:scoreUpdate",e=>this.score.update(e.detail.score))}levelDone(e){this.messageScreen.show(e)}newLevel(){this.messageScreen.hide()}gameEnd(e){this.messageScreen.show("game:end",{__SCORE__:this.score.get().toString(),__MAX_SCORE__:e.toString()})}restart(){this.messageScreen.show("game:start"),this.score.update(0,!0)}getScore(){return this.score.get()}}class a{static getRandomColor(){let e=Math.round,t=Math.random;return`rgba(${e(255*t())},${e(255*t())},${e(255*t())},1)`}static getRandomInt(e,t){return Math.floor(Math.random()*(t-e+1))+e}static checkCollision(e,t){return e.left<=t.right&&t.left<=e.right&&e.top<=t.bottom&&t.top<=e.bottom}}class l extends i{constructor(e,t,s,i){super("block",0,0,"level"),this.destination={x:0,y:0},this.speed=t,this.width=s,this.height=i,this.color=e,this.el.style.backgroundImage=`repeating-linear-gradient(${a.getRandomInt(0,360)}deg, #000000, #000000 ${a.getRandomInt(2,10)}px, ${this.color} 10px, ${this.color} ${a.getRandomInt(20,40)}px)`,this.el.style.width=`${this.width}px`,this.el.style.height=`${this.height}px`,this.x=a.getRandomInt(0,window.outerWidth-this.width),this.y=a.getRandomInt(0,document.documentElement.clientHeight-this.height),this.el.style.transform=`translate(${this.x}px, ${this.y}px)`}destroy(){this.el.remove()}update(){this.x>this.destination.x-this.speed&&this.x<this.destination.x+this.speed&&(this.destination.x=a.getRandomInt(0,window.outerWidth-this.width)),this.y>this.destination.y-this.speed&&this.y<this.destination.y+this.speed&&(this.destination.y=a.getRandomInt(0,document.documentElement.clientHeight-this.height)),this.destination.x>=this.x?this.x+=this.speed:this.x-=this.speed,this.destination.y>=this.y?this.y+=this.speed:this.y-=this.speed,this.el.style.transform=`translate(${this.x}px, ${this.y}px)`}}class d extends i{constructor(){super("player",0,0,"level"),this.height=10,this.width=10,this.growthFactor=1.5,this.speed=2,this.speedIncreaseFactor=.2,this.keysAllowed=[37,38,39,40],this.keysPressed=[],this.x=window.outerWidth/2-this.width/2,this.y=document.documentElement.clientHeight/2-this.height/2,this.el.style.width=`${this.width}px`,this.el.style.height=`${this.height}px`,this.el.style.borderRadius=`${this.width}px`,n.addEventListener("keydown.player",e=>this.keyDownHandler(e)),n.addEventListener("keyup.player",e=>this.keyUpHandler(e))}keyDownHandler(e){let t=e.keyCode;this.keysAllowed.indexOf(t)>-1&&-1===this.keysPressed.indexOf(t)&&this.keysPressed.push(t)}keyUpHandler(e){let t=e.keyCode,s=this.keysPressed.indexOf(t);this.keysAllowed.indexOf(t)>-1&&s>-1&&this.keysPressed.splice(s,1)}update(){this.keysPressed.forEach(e=>{switch(e){case 37:this.x-=this.speed;break;case 38:this.y-=this.speed;break;case 39:this.x+=this.speed;break;case 40:this.y+=this.speed;break;default:return}}),this.x<0&&(this.x=0),this.y<0&&(this.y=0),this.x>window.outerWidth-this.width&&(this.x=window.outerWidth-this.width),this.y>document.documentElement.clientHeight-this.height&&(this.y=document.documentElement.clientHeight-this.height),this.el.style.transform=`translate(${this.x}px, ${this.y}px)`}blockCaught(e){this.speed+=this.speedIncreaseFactor,this.width+=this.growthFactor,this.height+=this.growthFactor,this.el.style.height=`${this.height}px`,this.el.style.width=`${this.width}px`,this.el.style.borderRadius=`${this.width}px`,this.el.style.backgroundColor=e.color}destroy(){n.removeEventListener("keydown.player"),n.removeEventListener("keyup.player")}}class c extends i{constructor(){super("timer",10,40,"level"),this.seconds=10,this.el.innerHTML=`time: ${this.seconds}`,this.intervalId=setInterval(()=>this.update(),1e3)}update(){this.seconds--,this.el.innerHTML=`time: ${this.seconds}`,0===this.seconds&&window.dispatchEvent(new Event("timer:done"))}destroy(){clearInterval(this.intervalId)}}class p extends i{constructor(e,t){super("level",0,0),this.blocks=[],this.failed=!1,this.totalBlocks=e,this.scorePerBlock=t,this.player=new d,this.timer=new c;for(let e=0;e<this.totalBlocks;e++)this.blocks.push(new l(a.getRandomColor(),a.getRandomInt(1,5),a.getRandomInt(10,150),a.getRandomInt(10,150)));n.addEventListener("timer:done",()=>{this.failed=!0,this.destroy("level:failed")})}update(){this.player.update(),this.blocks.forEach((e,t)=>{e.update(),a.checkCollision(this.player.getClientReact(),e.getClientReact())&&!1===this.failed&&(this.player.blockCaught(e),e.destroy(),this.blocks.splice(t,1),window.dispatchEvent(new CustomEvent("level:scoreUpdate",{detail:{score:this.scorePerBlock}})),0===this.blocks.length&&this.destroy("level:success"))})}destroy(e){this.timer.destroy(),this.player.destroy(),this.blocks.forEach((e,t)=>{e.destroy(),this.blocks.splice(t,1)}),n.removeEventListener("timer:done"),window.dispatchEvent(new Event(e)),this.el.remove()}}var u=s(0);class m{constructor(){this.endPointList=`/databases/${u.dataService.databaseName}/collections/${u.dataService.collectionName}?apiKey=${u.dataService.apiKey}`,this.endPointSave=`/databases/${u.dataService.databaseName}/collections/${u.dataService.collectionName}?apiKey=${u.dataService.apiKey}`}saveScore(e){if(!1===u.functionalities.dataService)return this.disabled();let t=`${u.dataService.baseUrl}${this.endPointSave}`;return fetch(t,{body:JSON.stringify({score:e}),headers:{"content-type":"application/json"},method:"POST",mode:"cors"}).then(e=>e.json())}getScores(){if(!1===u.functionalities.dataService)return this.disabled();let e=`${u.dataService.baseUrl}${this.endPointList}`;return fetch(e,{mode:"cors"}).then(e=>e.json())}disabled(){return new Promise(e=>{e({error:"Dataservice is disabled"})})}}window.addEventListener("load",()=>new class{constructor(){this.levelsPerGame=10,this.currentLevelsPlayed=0,this.elementsPerLevel=5,this.elementsIncreasePerLevel=5,this.scorePerElement=10,this.gui=new o,this.maxScore=this.calculateMaxScore(),this.gameLoop(),this.dataService=new m,this.dataService.getScores().then(e=>{console.log("Current scores",e)}),["level:success","level:failed"].map(e=>{window.addEventListener(e,e=>this.update(e.type))}),["game:start:click","level:success:click","level:failed:click"].map(e=>{window.addEventListener(e,()=>this.startNewLevel())}),window.addEventListener("game:end:click",()=>this.restart())}calculateMaxScore(){let e=0;for(let t=0;t<this.levelsPerGame;t++)e+=(this.elementsPerLevel+(0===t?0:this.elementsIncreasePerLevel*t))*this.scorePerElement;return e}gameLoop(){void 0!==this.level&&this.level.update(),requestAnimationFrame(()=>this.gameLoop())}update(e){if(this.currentLevelsPlayed++,this.currentLevelsPlayed===this.levelsPerGame)return this.gui.gameEnd(this.maxScore),void this.saveScore();this.gui.levelDone(e)}startNewLevel(){this.level&&!1===this.level.failed&&(this.elementsPerLevel+=this.elementsIncreasePerLevel),delete this.level,this.gui.newLevel(),this.level=new p(this.elementsPerLevel,this.scorePerElement)}restart(){this.gui.restart(),this.currentLevelsPlayed=0,this.elementsPerLevel=5}saveScore(){let e=this.gui.getScore();this.dataService.saveScore(e).then(e=>{console.log("Response after saving score",e)})}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,